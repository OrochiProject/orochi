Description:
This git repo is for the purpose of implementing in-memory speed up for time travel database.
What it does is basically read a database (assuming MySQL) access log file, create an in-memory sqlite database and dump the all table content to file.

Pipeline:
1) Init an empty SQLite in-memory database
2) Read from db access log file
3) Throw away non-write queries
4) Convert MySQL queries to SQLite queries
5) Build SQLite in-memory database
6) Dump the content of SQLite tables to a bulk SQL insert

Usage:
- Input: MySQL db access log following Orochi's required format (rid#&#opnum#&#r/w#&#ret#&#query|]|) and ending with 'END|]|' usually generated by MySQL logging mergy.py
- Output: MySQL create table and bulk insert file
- Steps:
    - convert table create queries to time travel version and should use sqlite grammar
        - for hotcrp or phpbb, use ./rewrite.py --input INPUTFILE --generate-config --output init_query.h
    - in main.cc initialize() function, you need to manually change code based on which db table in your app uses autoinc columns (Horrible... will change to reading config file and let user config it)
    - make
    - ./main
    - input file is assumed to be /tmp/sql.log
    - output file is ./dump.sql

Validate:
The code can also validate whether sqlite in-memory time-travel database is correct
The way it's verified is as follows:
    - build sqlite time travel database
    - connect MySQL server and init a database with empty tables
    - Read one query a time and if it's a write query, apply to the MySQL db
    - On each modification, get back from MySQL the content of the whole table which is changed
    - do a time-travel select on SQLite ttdb
    - compare if they are identical
To use this:
    make validate (assuming you've already set the MySQL account and prepared the db init file)

Keep in mind:
This repo is very tricky to use because some steps in the pipeline has to be mannually down:
- First, in order to init the sqlite database, one has to manually convert the 'create table' queries to the time travel version.
    - For hotcrp, there is a python script called 'rewrite.py' which automatically does the conversion, but to port to other apps, one has to either 
      modify the rewrite script or manually do the conversion
- Second, for step (4), the current conversion is not complete, so if new cases are encountered, new logic has to be implemented...

Trouble shooting:
- always use `make validate` first to check if in-memory works
    - if validate rejects, this sqlite in-memory thing won't work
- if content does not match, there are two major possible cases:
    a) special characters like '\n' '\b' are handled in the wrong way
    b) sanity check needed for some non-deterministic thing like Timestamp
- if error 2006 (MySQL server has gone away encountered), restart MySQL server with --wait_timeout=2147483 --max_allowed_packet=1073741824

TODO:
- not sure if we handle special character correctly like '\n' and '\b'
- rewrite code, improve performance (the string replace is super slow, need some replacement)
- rewrite code to make it user-friendly, like parse arguments instead of recompiling
- the validate is not correct. It's validating the correctness of sqlite not the final dumped insert file.
